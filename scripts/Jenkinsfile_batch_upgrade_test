#!groovy

node {
  def branch = "main"
  def test_dir = "${env.TEST_DIRECTORY_LIST}".split(',')

  if ("${env.BRANCH}" != "null" && "${env.BRANCH}" != "") {
    branch = "${env.BRANCH}"
  }

  def repo = scm.userRemoteConfigs
  if ("${env.REPO}" != "null" && "${env.REPO}" != "") {
    repo = [
      [url: "${env.REPO}"]
    ]
  }
  def timeout = "60m"
  if ("${env.TIMEOUT}" != "null" && "${env.TIMEOUT}" != "") {
    timeout = "${env.TIMEOUT}"
  }
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg': 1]) {
    withFolderProperties {
      paramsMap = []
      params.each {
        if (it.value && it.value.trim() != "") {
          paramsMap << "$it.key=$it.value"
        }
      }
      withEnv(paramsMap) {
        stage('Checkout') {
          deleteDir()
          checkout([
            $class: 'GitSCM',
            branches: [
              [name: "*/${branch}"]
            ],
            extensions: scm.extensions + [
              [$class: 'CleanCheckout']
            ],
            userRemoteConfigs: repo
          ])
        }
        dir("./") {
          stage('Run Parallel Jobs') {
            echo "Running ${test_dir.size()} tests: ${test_dir}"
            def jobs = [:]

            test_dir.each { test_name ->
              def actual_testdir_name = test_name
              def job_test_args = "${TEST_ARGS}"
              def job_aws_ssh_key_name = "${AWS_SSH_KEY_NAME}"
              def job_aws_ssh_pem_key = "${AWS_SSH_PEM_KEY}"

              if (test_name.contains("upgrade")) {
                actual_testdir_name = "upgradecluster"
                if (test_name.contains("upgradesuc")) {
                  job_test_args = job_test_args + " -tags=upgradesuc -sucUpgradeVersion ${UPGRADE_VERSION}"
                }
                else if (test_name.contains("upgrademanual")) {
                  job_test_args = job_test_args + " -tags=upgrademanual -installVersionOrCommit ${UPGRADE_VERSION}"
                }
                else if (test_name == "upgradereplacement") {
                  job_test_args = job_test_args + " -tags=${test_name} -installVersionOrCommit ${UPGRADE_VERSION}"
                }
                job_test_args = job_test_args +  " -channel ${UPGRADE_CHANNEL}"
              }

              def upgrade_params = [
                string(name: 'TEST_ARGS', value: job_test_args),
                string(name: 'REPO', value: "${REPO}"), 
                string(name: 'BRANCH', value: "${BRANCH}"),                                         
                string(name: 'PRODUCT_NAME', value: "${PRODUCT_NAME}"),                    
                string(name: 'INSTALL_VERSION', value: "${INSTALL_VERSION}"),
                string(name: 'UPGRADE_VERSION', value: "${UPGRADE_VERSION}"),
                string(name: 'INSTALL_MODE', value: "${INSTALL_MODE}"),
                string(name: 'INSTALL_CHANNEL', value: "${INSTALL_CHANNEL}"),
                string(name: 'UPGRADE_CHANNEL', value: "${UPGRADE_CHANNEL}"),                
                string(name: 'HOSTNAME_PREFIX', value: "${HOSTNAME_PREFIX}"), 
                string(name: 'TEST_DIRECTORY', value: actual_testdir_name),
                string(name: 'AWS_SSH_KEY_NAME', value: job_aws_ssh_key_name),
                string(name: 'AWS_SSH_PEM_KEY', value: job_aws_ssh_pem_key),
                string(name: 'REPORT_TO_QASE', value: "${REPORT_TO_QASE}"),
                string(name: 'QASE_PROJECT_ID', value: "${QASE_PROJECT_ID}"),
                string(name: 'QASE_RUN_ID', value: "${QASE_RUN_ID}"),
              ]

              switch(test_name) {
                case "upgrademanual": 
                  jobs[test_name] = { build job: "${env.PRODUCT_NAME}_manual_upgrade", parameters: upgrade_params }
                  break
                case "upgrademanual_arm": 
                  jobs[test_name] = { build job: "${env.PRODUCT_NAME}_manual_upgrade_arm", parameters: upgrade_params }
                  break
                case "upgradesuc": 
                  jobs[test_name] = { build job: "${env.PRODUCT_NAME}_suc_upgrade", parameters: upgrade_params }
                  break
                case "upgradesuc_arm": 
                  jobs[test_name] = { build job: "${env.PRODUCT_NAME}_suc_upgrade_arm", parameters: upgrade_params }
                  break
                case "upgradesuc_splitroles": 
                  jobs[test_name] = { build job: "${env.PRODUCT_NAME}_suc_upgrade_splitroles", parameters: upgrade_params }
                  break
                case "upgradereplacement": 
                  jobs[test_name] = { build job: "${env.PRODUCT_NAME}_upgrade_node_replacement", parameters: upgrade_params }
                  break                                                       
              } // switch case
            } // for each test_dir loop

            parallel jobs
          } // stage run parallel jobs
        } // dir
      } // withEnv
    } // withFolderProperties
  } // wrap
} // node
